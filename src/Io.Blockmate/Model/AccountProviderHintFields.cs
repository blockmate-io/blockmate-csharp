/*
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Blockmate.Client.OpenAPIDateConverter;

namespace Io.Blockmate.Model
{
    /// <summary>
    /// AccountProviderHintFields
    /// </summary>
    [DataContract]
    public partial class AccountProviderHintFields : Dictionary<String, string>,  IEquatable<AccountProviderHintFields>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountProviderHintFields" /> class.
        /// </summary>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="apiSecret">apiSecret.</param>
        /// <param name="apiPassphrase">apiPassphrase.</param>
        /// <param name="description">description.</param>
        /// <param name="wallet">wallet.</param>
        public AccountProviderHintFields(string apiKey = default(string), string apiSecret = default(string), string apiPassphrase = default(string), string description = default(string), string wallet = default(string)) : base()
        {
            this.ApiKey = apiKey;
            this.ApiSecret = apiSecret;
            this.ApiPassphrase = apiPassphrase;
            this.Description = description;
            this.Wallet = wallet;
        }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="api_key", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets ApiSecret
        /// </summary>
        [DataMember(Name="api_secret", EmitDefaultValue=false)]
        public string ApiSecret { get; set; }

        /// <summary>
        /// Gets or Sets ApiPassphrase
        /// </summary>
        [DataMember(Name="api_passphrase", EmitDefaultValue=false)]
        public string ApiPassphrase { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Wallet
        /// </summary>
        [DataMember(Name="wallet", EmitDefaultValue=false)]
        public string Wallet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountProviderHintFields {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  ApiSecret: ").Append(ApiSecret).Append("\n");
            sb.Append("  ApiPassphrase: ").Append(ApiPassphrase).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Wallet: ").Append(Wallet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountProviderHintFields);
        }

        /// <summary>
        /// Returns true if AccountProviderHintFields instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountProviderHintFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountProviderHintFields input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && base.Equals(input) && 
                (
                    this.ApiSecret == input.ApiSecret ||
                    (this.ApiSecret != null &&
                    this.ApiSecret.Equals(input.ApiSecret))
                ) && base.Equals(input) && 
                (
                    this.ApiPassphrase == input.ApiPassphrase ||
                    (this.ApiPassphrase != null &&
                    this.ApiPassphrase.Equals(input.ApiPassphrase))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Wallet == input.Wallet ||
                    (this.Wallet != null &&
                    this.Wallet.Equals(input.Wallet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.ApiSecret != null)
                    hashCode = hashCode * 59 + this.ApiSecret.GetHashCode();
                if (this.ApiPassphrase != null)
                    hashCode = hashCode * 59 + this.ApiPassphrase.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Wallet != null)
                    hashCode = hashCode * 59 + this.Wallet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
