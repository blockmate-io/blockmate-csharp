/*
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Blockmate.Client.OpenAPIDateConverter;

namespace Io.Blockmate.Model
{
    /// <summary>
    /// Information about whether and why a contract was marked as spam.
    /// </summary>
    [DataContract]
    public partial class NftSpamInfo :  IEquatable<NftSpamInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NftSpamInfo" /> class.
        /// </summary>
        /// <param name="isSpam">\&quot;true\&quot; if contract is spam, else \&quot;false\&quot;.</param>
        /// <param name="classifications">List of reasons why a contract was classified as spam..</param>
        public NftSpamInfo(string isSpam = default(string), List<string> classifications = default(List<string>))
        {
            this.IsSpam = isSpam;
            this.Classifications = classifications;
        }

        /// <summary>
        /// \&quot;true\&quot; if contract is spam, else \&quot;false\&quot;
        /// </summary>
        /// <value>\&quot;true\&quot; if contract is spam, else \&quot;false\&quot;</value>
        [DataMember(Name="isSpam", EmitDefaultValue=false)]
        public string IsSpam { get; set; }

        /// <summary>
        /// List of reasons why a contract was classified as spam.
        /// </summary>
        /// <value>List of reasons why a contract was classified as spam.</value>
        [DataMember(Name="classifications", EmitDefaultValue=false)]
        public List<string> Classifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NftSpamInfo {\n");
            sb.Append("  IsSpam: ").Append(IsSpam).Append("\n");
            sb.Append("  Classifications: ").Append(Classifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NftSpamInfo);
        }

        /// <summary>
        /// Returns true if NftSpamInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of NftSpamInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NftSpamInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsSpam == input.IsSpam ||
                    (this.IsSpam != null &&
                    this.IsSpam.Equals(input.IsSpam))
                ) && 
                (
                    this.Classifications == input.Classifications ||
                    this.Classifications != null &&
                    input.Classifications != null &&
                    this.Classifications.SequenceEqual(input.Classifications)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsSpam != null)
                    hashCode = hashCode * 59 + this.IsSpam.GetHashCode();
                if (this.Classifications != null)
                    hashCode = hashCode * 59 + this.Classifications.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
