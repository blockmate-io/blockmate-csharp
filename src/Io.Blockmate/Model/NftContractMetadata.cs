/*
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Blockmate.Client.OpenAPIDateConverter;

namespace Io.Blockmate.Model
{
    /// <summary>
    /// NftContractMetadata
    /// </summary>
    [DataContract]
    public partial class NftContractMetadata :  IEquatable<NftContractMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NftContractMetadata" /> class.
        /// </summary>
        /// <param name="name">String - NFT contract name..</param>
        /// <param name="symbol">String - NFT contract symbol abbreviation..</param>
        /// <param name="totalSupply">String - Total number of NFTs in a given NFT collection..</param>
        /// <param name="tokenType">String - &#39;ERC721&#39; or &#39;ERC1155&#39;.</param>
        public NftContractMetadata(string name = default(string), string symbol = default(string), string totalSupply = default(string), string tokenType = default(string))
        {
            this.Name = name;
            this.Symbol = symbol;
            this.TotalSupply = totalSupply;
            this.TokenType = tokenType;
        }

        /// <summary>
        /// String - NFT contract name.
        /// </summary>
        /// <value>String - NFT contract name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// String - NFT contract symbol abbreviation.
        /// </summary>
        /// <value>String - NFT contract symbol abbreviation.</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// String - Total number of NFTs in a given NFT collection.
        /// </summary>
        /// <value>String - Total number of NFTs in a given NFT collection.</value>
        [DataMember(Name="totalSupply", EmitDefaultValue=false)]
        public string TotalSupply { get; set; }

        /// <summary>
        /// String - &#39;ERC721&#39; or &#39;ERC1155&#39;
        /// </summary>
        /// <value>String - &#39;ERC721&#39; or &#39;ERC1155&#39;</value>
        [DataMember(Name="tokenType", EmitDefaultValue=false)]
        public string TokenType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NftContractMetadata {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  TotalSupply: ").Append(TotalSupply).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NftContractMetadata);
        }

        /// <summary>
        /// Returns true if NftContractMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of NftContractMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NftContractMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.TotalSupply == input.TotalSupply ||
                    (this.TotalSupply != null &&
                    this.TotalSupply.Equals(input.TotalSupply))
                ) && 
                (
                    this.TokenType == input.TokenType ||
                    (this.TokenType != null &&
                    this.TokenType.Equals(input.TokenType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.TotalSupply != null)
                    hashCode = hashCode * 59 + this.TotalSupply.GetHashCode();
                if (this.TokenType != null)
                    hashCode = hashCode * 59 + this.TokenType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
