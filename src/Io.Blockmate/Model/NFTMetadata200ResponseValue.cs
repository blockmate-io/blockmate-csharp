/*
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Blockmate.Client.OpenAPIDateConverter;

namespace Io.Blockmate.Model
{
    /// <summary>
    /// The response format is dependent on a third-party, so it can change in the future.
    /// </summary>
    [DataContract]
    public partial class NFTMetadata200ResponseValue :  IEquatable<NFTMetadata200ResponseValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NFTMetadata200ResponseValue" /> class.
        /// </summary>
        /// <param name="ownedNfts">ownedNfts.</param>
        /// <param name="totalCount">String - Total number of NFTs owned by the given address..</param>
        /// <param name="blockHash">String - The canonical head block hash of when your request was received.</param>
        public NFTMetadata200ResponseValue(List<OwnedNft> ownedNfts = default(List<OwnedNft>), string totalCount = default(string), string blockHash = default(string))
        {
            this.OwnedNfts = ownedNfts;
            this.TotalCount = totalCount;
            this.BlockHash = blockHash;
        }

        /// <summary>
        /// Gets or Sets OwnedNfts
        /// </summary>
        [DataMember(Name="ownedNfts", EmitDefaultValue=false)]
        public List<OwnedNft> OwnedNfts { get; set; }

        /// <summary>
        /// String - Total number of NFTs owned by the given address.
        /// </summary>
        /// <value>String - Total number of NFTs owned by the given address.</value>
        [DataMember(Name="totalCount", EmitDefaultValue=false)]
        public string TotalCount { get; set; }

        /// <summary>
        /// String - The canonical head block hash of when your request was received
        /// </summary>
        /// <value>String - The canonical head block hash of when your request was received</value>
        [DataMember(Name="blockHash", EmitDefaultValue=false)]
        public string BlockHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NFTMetadata200ResponseValue {\n");
            sb.Append("  OwnedNfts: ").Append(OwnedNfts).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  BlockHash: ").Append(BlockHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NFTMetadata200ResponseValue);
        }

        /// <summary>
        /// Returns true if NFTMetadata200ResponseValue instances are equal
        /// </summary>
        /// <param name="input">Instance of NFTMetadata200ResponseValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NFTMetadata200ResponseValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OwnedNfts == input.OwnedNfts ||
                    this.OwnedNfts != null &&
                    input.OwnedNfts != null &&
                    this.OwnedNfts.SequenceEqual(input.OwnedNfts)
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                ) && 
                (
                    this.BlockHash == input.BlockHash ||
                    (this.BlockHash != null &&
                    this.BlockHash.Equals(input.BlockHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OwnedNfts != null)
                    hashCode = hashCode * 59 + this.OwnedNfts.GetHashCode();
                if (this.TotalCount != null)
                    hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                if (this.BlockHash != null)
                    hashCode = hashCode * 59 + this.BlockHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
