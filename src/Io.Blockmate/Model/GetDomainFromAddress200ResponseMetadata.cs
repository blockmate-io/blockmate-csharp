/*
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Blockmate.Client.OpenAPIDateConverter;

namespace Io.Blockmate.Model
{
    /// <summary>
    /// The response format is dependent on a third-party, so it can change in the future.
    /// </summary>
    [DataContract]
    public partial class GetDomainFromAddress200ResponseMetadata :  IEquatable<GetDomainFromAddress200ResponseMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDomainFromAddress200ResponseMetadata" /> class.
        /// </summary>
        /// <param name="attributes">attributes.</param>
        /// <param name="backgroundImage">backgroundImage.</param>
        /// <param name="description">description.</param>
        /// <param name="image">image.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="isNormalized">isNormalized.</param>
        /// <param name="name">name.</param>
        /// <param name="nameLength">nameLength.</param>
        /// <param name="segmentLength">segmentLength.</param>
        /// <param name="url">url.</param>
        /// <param name="version">version.</param>
        public GetDomainFromAddress200ResponseMetadata(List<GetDomainFromAddress200ResponseMetadataAttributesInner> attributes = default(List<GetDomainFromAddress200ResponseMetadataAttributesInner>), string backgroundImage = default(string), string description = default(string), string image = default(string), string imageUrl = default(string), bool isNormalized = default(bool), string name = default(string), int nameLength = default(int), int segmentLength = default(int), string url = default(string), int version = default(int))
        {
            this.Attributes = attributes;
            this.BackgroundImage = backgroundImage;
            this.Description = description;
            this.Image = image;
            this.ImageUrl = imageUrl;
            this.IsNormalized = isNormalized;
            this.Name = name;
            this.NameLength = nameLength;
            this.SegmentLength = segmentLength;
            this.Url = url;
            this._Version = version;
        }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public List<GetDomainFromAddress200ResponseMetadataAttributesInner> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundImage
        /// </summary>
        [DataMember(Name="background_image", EmitDefaultValue=false)]
        public string BackgroundImage { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="image_url", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsNormalized
        /// </summary>
        [DataMember(Name="is_normalized", EmitDefaultValue=false)]
        public bool IsNormalized { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NameLength
        /// </summary>
        [DataMember(Name="name_length", EmitDefaultValue=false)]
        public int NameLength { get; set; }

        /// <summary>
        /// Gets or Sets SegmentLength
        /// </summary>
        [DataMember(Name="segment_length", EmitDefaultValue=false)]
        public int SegmentLength { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int _Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDomainFromAddress200ResponseMetadata {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  BackgroundImage: ").Append(BackgroundImage).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  IsNormalized: ").Append(IsNormalized).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameLength: ").Append(NameLength).Append("\n");
            sb.Append("  SegmentLength: ").Append(SegmentLength).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDomainFromAddress200ResponseMetadata);
        }

        /// <summary>
        /// Returns true if GetDomainFromAddress200ResponseMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDomainFromAddress200ResponseMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDomainFromAddress200ResponseMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.BackgroundImage == input.BackgroundImage ||
                    (this.BackgroundImage != null &&
                    this.BackgroundImage.Equals(input.BackgroundImage))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.IsNormalized == input.IsNormalized ||
                    (this.IsNormalized != null &&
                    this.IsNormalized.Equals(input.IsNormalized))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NameLength == input.NameLength ||
                    (this.NameLength != null &&
                    this.NameLength.Equals(input.NameLength))
                ) && 
                (
                    this.SegmentLength == input.SegmentLength ||
                    (this.SegmentLength != null &&
                    this.SegmentLength.Equals(input.SegmentLength))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.BackgroundImage != null)
                    hashCode = hashCode * 59 + this.BackgroundImage.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.IsNormalized != null)
                    hashCode = hashCode * 59 + this.IsNormalized.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NameLength != null)
                    hashCode = hashCode * 59 + this.NameLength.GetHashCode();
                if (this.SegmentLength != null)
                    hashCode = hashCode * 59 + this.SegmentLength.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
