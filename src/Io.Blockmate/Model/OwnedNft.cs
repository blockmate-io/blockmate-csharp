/*
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Blockmate.Client.OpenAPIDateConverter;

namespace Io.Blockmate.Model
{
    /// <summary>
    /// OwnedNft
    /// </summary>
    [DataContract]
    public partial class OwnedNft :  IEquatable<OwnedNft>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OwnedNft" /> class.
        /// </summary>
        /// <param name="contract">contract.</param>
        /// <param name="id">id.</param>
        /// <param name="balance">String - Token balance.</param>
        /// <param name="title">String - Name of the NFT asset..</param>
        /// <param name="description">String - Brief human-readable description.</param>
        /// <param name="tokenUri">tokenUri.</param>
        /// <param name="media">media.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="timeLastUpdated">String - ISO timestamp of the last cache refresh for the information returned in the metadata field..</param>
        /// <param name="error">String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT..</param>
        /// <param name="contractMetadata">contractMetadata.</param>
        /// <param name="spamInfo">spamInfo.</param>
        public OwnedNft(OwnedNftContract contract = default(OwnedNftContract), NftId id = default(NftId), string balance = default(string), string title = default(string), string description = default(string), NftTokenUri tokenUri = default(NftTokenUri), OwnedNftMedia media = default(OwnedNftMedia), Metadata metadata = default(Metadata), string timeLastUpdated = default(string), string error = default(string), NftContractMetadata contractMetadata = default(NftContractMetadata), NftSpamInfo spamInfo = default(NftSpamInfo))
        {
            this.Contract = contract;
            this.Id = id;
            this.Balance = balance;
            this.Title = title;
            this.Description = description;
            this.TokenUri = tokenUri;
            this.Media = media;
            this.Metadata = metadata;
            this.TimeLastUpdated = timeLastUpdated;
            this.Error = error;
            this.ContractMetadata = contractMetadata;
            this.SpamInfo = spamInfo;
        }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [DataMember(Name="contract", EmitDefaultValue=false)]
        public OwnedNftContract Contract { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public NftId Id { get; set; }

        /// <summary>
        /// String - Token balance
        /// </summary>
        /// <value>String - Token balance</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public string Balance { get; set; }

        /// <summary>
        /// String - Name of the NFT asset.
        /// </summary>
        /// <value>String - Name of the NFT asset.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// String - Brief human-readable description
        /// </summary>
        /// <value>String - Brief human-readable description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets TokenUri
        /// </summary>
        [DataMember(Name="tokenUri", EmitDefaultValue=false)]
        public NftTokenUri TokenUri { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public OwnedNftMedia Media { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Metadata Metadata { get; set; }

        /// <summary>
        /// String - ISO timestamp of the last cache refresh for the information returned in the metadata field.
        /// </summary>
        /// <value>String - ISO timestamp of the last cache refresh for the information returned in the metadata field.</value>
        [DataMember(Name="timeLastUpdated", EmitDefaultValue=false)]
        public string TimeLastUpdated { get; set; }

        /// <summary>
        /// String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.
        /// </summary>
        /// <value>String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets ContractMetadata
        /// </summary>
        [DataMember(Name="contractMetadata", EmitDefaultValue=false)]
        public NftContractMetadata ContractMetadata { get; set; }

        /// <summary>
        /// Gets or Sets SpamInfo
        /// </summary>
        [DataMember(Name="spamInfo", EmitDefaultValue=false)]
        public NftSpamInfo SpamInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OwnedNft {\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TokenUri: ").Append(TokenUri).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  TimeLastUpdated: ").Append(TimeLastUpdated).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  ContractMetadata: ").Append(ContractMetadata).Append("\n");
            sb.Append("  SpamInfo: ").Append(SpamInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OwnedNft);
        }

        /// <summary>
        /// Returns true if OwnedNft instances are equal
        /// </summary>
        /// <param name="input">Instance of OwnedNft to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OwnedNft input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TokenUri == input.TokenUri ||
                    (this.TokenUri != null &&
                    this.TokenUri.Equals(input.TokenUri))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.TimeLastUpdated == input.TimeLastUpdated ||
                    (this.TimeLastUpdated != null &&
                    this.TimeLastUpdated.Equals(input.TimeLastUpdated))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.ContractMetadata == input.ContractMetadata ||
                    (this.ContractMetadata != null &&
                    this.ContractMetadata.Equals(input.ContractMetadata))
                ) && 
                (
                    this.SpamInfo == input.SpamInfo ||
                    (this.SpamInfo != null &&
                    this.SpamInfo.Equals(input.SpamInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Contract != null)
                    hashCode = hashCode * 59 + this.Contract.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TokenUri != null)
                    hashCode = hashCode * 59 + this.TokenUri.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.TimeLastUpdated != null)
                    hashCode = hashCode * 59 + this.TimeLastUpdated.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.ContractMetadata != null)
                    hashCode = hashCode * 59 + this.ContractMetadata.GetHashCode();
                if (this.SpamInfo != null)
                    hashCode = hashCode * 59 + this.SpamInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
