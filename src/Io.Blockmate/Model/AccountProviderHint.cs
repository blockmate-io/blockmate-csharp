/*
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Blockmate.Client.OpenAPIDateConverter;

namespace Io.Blockmate.Model
{
    /// <summary>
    /// Account provider hint containing info about what is needed to connect such an account
    /// </summary>
    [DataContract]
    public partial class AccountProviderHint :  IEquatable<AccountProviderHint>, IValidatableObject
    {
        /// <summary>
        /// Defines AccountType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountTypeEnum
        {
            /// <summary>
            /// Enum Wallet for value: crypto_wallet
            /// </summary>
            [EnumMember(Value = "crypto_wallet")]
            Wallet = 1,

            /// <summary>
            /// Enum Exchange for value: crypto_exchange
            /// </summary>
            [EnumMember(Value = "crypto_exchange")]
            Exchange = 2,

            /// <summary>
            /// Enum Nft for value: crypto_nft
            /// </summary>
            [EnumMember(Value = "crypto_nft")]
            Nft = 3

        }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name="account_type", EmitDefaultValue=true)]
        public AccountTypeEnum AccountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountProviderHint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountProviderHint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountProviderHint" /> class.
        /// </summary>
        /// <param name="accountName">accountName (required).</param>
        /// <param name="accountType">accountType (required).</param>
        /// <param name="accountUrl">accountUrl (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="url">url (required).</param>
        /// <param name="intro">intro.</param>
        /// <param name="fields">fields (required).</param>
        /// <param name="oauth">oauth (required).</param>
        public AccountProviderHint(string accountName = default(string), AccountTypeEnum accountType = default(AccountTypeEnum), string accountUrl = default(string), string description = default(string), string url = default(string), string intro = default(string), AccountProviderHintFields fields = default(AccountProviderHintFields), bool oauth = default(bool))
        {
            // to ensure "accountName" is required (not null)
            if (accountName == null)
            {
                throw new InvalidDataException("accountName is a required property for AccountProviderHint and cannot be null");
            }
            else
            {
                this.AccountName = accountName;
            }

            // to ensure "accountType" is required (not null)
            if (accountType == null)
            {
                throw new InvalidDataException("accountType is a required property for AccountProviderHint and cannot be null");
            }
            else
            {
                this.AccountType = accountType;
            }

            // to ensure "accountUrl" is required (not null)
            if (accountUrl == null)
            {
                throw new InvalidDataException("accountUrl is a required property for AccountProviderHint and cannot be null");
            }
            else
            {
                this.AccountUrl = accountUrl;
            }

            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for AccountProviderHint and cannot be null");
            }
            else
            {
                this.Description = description;
            }

            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for AccountProviderHint and cannot be null");
            }
            else
            {
                this.Url = url;
            }

            // to ensure "fields" is required (not null)
            if (fields == null)
            {
                throw new InvalidDataException("fields is a required property for AccountProviderHint and cannot be null");
            }
            else
            {
                this.Fields = fields;
            }

            // to ensure "oauth" is required (not null)
            if (oauth == null)
            {
                throw new InvalidDataException("oauth is a required property for AccountProviderHint and cannot be null");
            }
            else
            {
                this.Oauth = oauth;
            }

            this.Intro = intro;
        }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="account_name", EmitDefaultValue=true)]
        public string AccountName { get; set; }


        /// <summary>
        /// Gets or Sets AccountUrl
        /// </summary>
        [DataMember(Name="account_url", EmitDefaultValue=true)]
        public string AccountUrl { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Intro
        /// </summary>
        [DataMember(Name="intro", EmitDefaultValue=false)]
        public string Intro { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=true)]
        public AccountProviderHintFields Fields { get; set; }

        /// <summary>
        /// Gets or Sets Oauth
        /// </summary>
        [DataMember(Name="oauth", EmitDefaultValue=true)]
        public bool Oauth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountProviderHint {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountUrl: ").Append(AccountUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Oauth: ").Append(Oauth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountProviderHint);
        }

        /// <summary>
        /// Returns true if AccountProviderHint instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountProviderHint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountProviderHint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.AccountUrl == input.AccountUrl ||
                    (this.AccountUrl != null &&
                    this.AccountUrl.Equals(input.AccountUrl))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Intro == input.Intro ||
                    (this.Intro != null &&
                    this.Intro.Equals(input.Intro))
                ) && 
                (
                    this.Fields == input.Fields ||
                    (this.Fields != null &&
                    this.Fields.Equals(input.Fields))
                ) && 
                (
                    this.Oauth == input.Oauth ||
                    (this.Oauth != null &&
                    this.Oauth.Equals(input.Oauth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.AccountUrl != null)
                    hashCode = hashCode * 59 + this.AccountUrl.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Intro != null)
                    hashCode = hashCode * 59 + this.Intro.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.Oauth != null)
                    hashCode = hashCode * 59 + this.Oauth.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
