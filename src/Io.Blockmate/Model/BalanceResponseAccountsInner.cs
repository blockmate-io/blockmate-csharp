/*
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Blockmate.Client.OpenAPIDateConverter;

namespace Io.Blockmate.Model
{
    /// <summary>
    /// BalanceResponseAccountsInner
    /// </summary>
    [DataContract]
    public partial class BalanceResponseAccountsInner :  IEquatable<BalanceResponseAccountsInner>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Wallet for value: crypto_wallet
            /// </summary>
            [EnumMember(Value = "crypto_wallet")]
            Wallet = 1,

            /// <summary>
            /// Enum Exchange for value: crypto_exchange
            /// </summary>
            [EnumMember(Value = "crypto_exchange")]
            Exchange = 2,

            /// <summary>
            /// Enum Nft for value: crypto_nft
            /// </summary>
            [EnumMember(Value = "crypto_nft")]
            Nft = 3

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceResponseAccountsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BalanceResponseAccountsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceResponseAccountsInner" /> class.
        /// </summary>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="balance">balance (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="verified">verified (required).</param>
        /// <param name="url">url (required).</param>
        public BalanceResponseAccountsInner(string accountId = default(string), string description = default(string), TypeEnum type = default(TypeEnum), List<Amount> balance = default(List<Amount>), BalanceResponseAccountsInnerState state = default(BalanceResponseAccountsInnerState), string name = default(string), bool verified = default(bool), string url = default(string))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for BalanceResponseAccountsInner and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }

            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for BalanceResponseAccountsInner and cannot be null");
            }
            else
            {
                this.Description = description;
            }

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BalanceResponseAccountsInner and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // to ensure "balance" is required (not null)
            if (balance == null)
            {
                throw new InvalidDataException("balance is a required property for BalanceResponseAccountsInner and cannot be null");
            }
            else
            {
                this.Balance = balance;
            }

            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for BalanceResponseAccountsInner and cannot be null");
            }
            else
            {
                this.State = state;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for BalanceResponseAccountsInner and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "verified" is required (not null)
            if (verified == null)
            {
                throw new InvalidDataException("verified is a required property for BalanceResponseAccountsInner and cannot be null");
            }
            else
            {
                this.Verified = verified;
            }

            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for BalanceResponseAccountsInner and cannot be null");
            }
            else
            {
                this.Url = url;
            }

        }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="account_id", EmitDefaultValue=true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }


        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name="balance", EmitDefaultValue=true)]
        public List<Amount> Balance { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=true)]
        public BalanceResponseAccountsInnerState State { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [DataMember(Name="verified", EmitDefaultValue=true)]
        public bool Verified { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BalanceResponseAccountsInner {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BalanceResponseAccountsInner);
        }

        /// <summary>
        /// Returns true if BalanceResponseAccountsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of BalanceResponseAccountsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BalanceResponseAccountsInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Balance == input.Balance ||
                    this.Balance != null &&
                    input.Balance != null &&
                    this.Balance.SequenceEqual(input.Balance)
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Verified == input.Verified ||
                    (this.Verified != null &&
                    this.Verified.Equals(input.Verified))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Verified != null)
                    hashCode = hashCode * 59 + this.Verified.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
