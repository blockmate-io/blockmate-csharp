/*
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Blockmate.Client.OpenAPIDateConverter;

namespace Io.Blockmate.Model
{
    /// <summary>
    /// OwnedNftMedia
    /// </summary>
    [DataContract]
    public partial class OwnedNftMedia :  IEquatable<OwnedNftMedia>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OwnedNftMedia" /> class.
        /// </summary>
        /// <param name="raw">String - Uri representing the location of the NFT&#39;s original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated..</param>
        /// <param name="gateway">String - Public gateway uri for the raw uri above..</param>
        /// <param name="thumbnail">URL for a resized thumbnail of the NFT media asset..</param>
        /// <param name="format">The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets..</param>
        /// <param name="bytes">The size of the media asset in bytes..</param>
        public OwnedNftMedia(string raw = default(string), string gateway = default(string), string thumbnail = default(string), string format = default(string), int bytes = default(int))
        {
            this.Raw = raw;
            this.Gateway = gateway;
            this.Thumbnail = thumbnail;
            this.Format = format;
            this.Bytes = bytes;
        }

        /// <summary>
        /// String - Uri representing the location of the NFT&#39;s original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.
        /// </summary>
        /// <value>String - Uri representing the location of the NFT&#39;s original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.</value>
        [DataMember(Name="raw", EmitDefaultValue=false)]
        public string Raw { get; set; }

        /// <summary>
        /// String - Public gateway uri for the raw uri above.
        /// </summary>
        /// <value>String - Public gateway uri for the raw uri above.</value>
        [DataMember(Name="gateway", EmitDefaultValue=false)]
        public string Gateway { get; set; }

        /// <summary>
        /// URL for a resized thumbnail of the NFT media asset.
        /// </summary>
        /// <value>URL for a resized thumbnail of the NFT media asset.</value>
        [DataMember(Name="thumbnail", EmitDefaultValue=false)]
        public string Thumbnail { get; set; }

        /// <summary>
        /// The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.
        /// </summary>
        /// <value>The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// The size of the media asset in bytes.
        /// </summary>
        /// <value>The size of the media asset in bytes.</value>
        [DataMember(Name="bytes", EmitDefaultValue=false)]
        public int Bytes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OwnedNftMedia {\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Bytes: ").Append(Bytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OwnedNftMedia);
        }

        /// <summary>
        /// Returns true if OwnedNftMedia instances are equal
        /// </summary>
        /// <param name="input">Instance of OwnedNftMedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OwnedNftMedia input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Raw == input.Raw ||
                    (this.Raw != null &&
                    this.Raw.Equals(input.Raw))
                ) && 
                (
                    this.Gateway == input.Gateway ||
                    (this.Gateway != null &&
                    this.Gateway.Equals(input.Gateway))
                ) && 
                (
                    this.Thumbnail == input.Thumbnail ||
                    (this.Thumbnail != null &&
                    this.Thumbnail.Equals(input.Thumbnail))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Bytes == input.Bytes ||
                    (this.Bytes != null &&
                    this.Bytes.Equals(input.Bytes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Raw != null)
                    hashCode = hashCode * 59 + this.Raw.GetHashCode();
                if (this.Gateway != null)
                    hashCode = hashCode * 59 + this.Gateway.GetHashCode();
                if (this.Thumbnail != null)
                    hashCode = hashCode * 59 + this.Thumbnail.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Bytes != null)
                    hashCode = hashCode * 59 + this.Bytes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
