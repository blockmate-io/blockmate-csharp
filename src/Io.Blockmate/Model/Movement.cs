/*
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Blockmate.Client.OpenAPIDateConverter;

namespace Io.Blockmate.Model
{
    /// <summary>
    /// Movement
    /// </summary>
    [DataContract]
    public partial class Movement :  IEquatable<Movement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Movement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Movement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Movement" /> class.
        /// </summary>
        /// <param name="address">address (required).</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="currencyName">currencyName (required).</param>
        /// <param name="currencySymbol">currencySymbol (required).</param>
        /// <param name="value">value (required).</param>
        /// <param name="owned">owned (required).</param>
        /// <param name="fee">fee (required).</param>
        /// <param name="imageName">imageName.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="convertedCurrency">convertedCurrency.</param>
        /// <param name="convertedValue">convertedValue.</param>
        /// <param name="name">name if known.</param>
        /// <param name="category">category if known.</param>
        public Movement(string address = default(string), string currency = default(string), string currencyName = default(string), string currencySymbol = default(string), decimal value = default(decimal), bool owned = default(bool), bool fee = default(bool), string imageName = default(string), string imageUrl = default(string), string convertedCurrency = default(string), decimal convertedValue = default(decimal), string name = default(string), string category = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for Movement and cannot be null");
            }
            else
            {
                this.Address = address;
            }

            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for Movement and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }

            // to ensure "currencyName" is required (not null)
            if (currencyName == null)
            {
                throw new InvalidDataException("currencyName is a required property for Movement and cannot be null");
            }
            else
            {
                this.CurrencyName = currencyName;
            }

            // to ensure "currencySymbol" is required (not null)
            if (currencySymbol == null)
            {
                throw new InvalidDataException("currencySymbol is a required property for Movement and cannot be null");
            }
            else
            {
                this.CurrencySymbol = currencySymbol;
            }

            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for Movement and cannot be null");
            }
            else
            {
                this.Value = value;
            }

            // to ensure "owned" is required (not null)
            if (owned == null)
            {
                throw new InvalidDataException("owned is a required property for Movement and cannot be null");
            }
            else
            {
                this.Owned = owned;
            }

            // to ensure "fee" is required (not null)
            if (fee == null)
            {
                throw new InvalidDataException("fee is a required property for Movement and cannot be null");
            }
            else
            {
                this.Fee = fee;
            }

            this.ImageName = imageName;
            this.ImageUrl = imageUrl;
            this.ImageName = imageName;
            this.ImageUrl = imageUrl;
            this.ConvertedCurrency = convertedCurrency;
            this.ConvertedValue = convertedValue;
            this.Name = name;
            this.Category = category;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyName
        /// </summary>
        [DataMember(Name="currency_name", EmitDefaultValue=true)]
        public string CurrencyName { get; set; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        [DataMember(Name="currency_symbol", EmitDefaultValue=true)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets or Sets Owned
        /// </summary>
        [DataMember(Name="owned", EmitDefaultValue=true)]
        public bool Owned { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name="fee", EmitDefaultValue=true)]
        public bool Fee { get; set; }

        /// <summary>
        /// Gets or Sets ImageName
        /// </summary>
        [DataMember(Name="image_name", EmitDefaultValue=true)]
        public string ImageName { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="image_url", EmitDefaultValue=true)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ConvertedCurrency
        /// </summary>
        [DataMember(Name="converted_currency", EmitDefaultValue=false)]
        public string ConvertedCurrency { get; set; }

        /// <summary>
        /// Gets or Sets ConvertedValue
        /// </summary>
        [DataMember(Name="converted_value", EmitDefaultValue=false)]
        public decimal ConvertedValue { get; set; }

        /// <summary>
        /// name if known
        /// </summary>
        /// <value>name if known</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// category if known
        /// </summary>
        /// <value>category if known</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Movement {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Owned: ").Append(Owned).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  ImageName: ").Append(ImageName).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ConvertedCurrency: ").Append(ConvertedCurrency).Append("\n");
            sb.Append("  ConvertedValue: ").Append(ConvertedValue).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Movement);
        }

        /// <summary>
        /// Returns true if Movement instances are equal
        /// </summary>
        /// <param name="input">Instance of Movement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Movement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CurrencyName == input.CurrencyName ||
                    (this.CurrencyName != null &&
                    this.CurrencyName.Equals(input.CurrencyName))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Owned == input.Owned ||
                    (this.Owned != null &&
                    this.Owned.Equals(input.Owned))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.ImageName == input.ImageName ||
                    (this.ImageName != null &&
                    this.ImageName.Equals(input.ImageName))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.ConvertedCurrency == input.ConvertedCurrency ||
                    (this.ConvertedCurrency != null &&
                    this.ConvertedCurrency.Equals(input.ConvertedCurrency))
                ) && 
                (
                    this.ConvertedValue == input.ConvertedValue ||
                    (this.ConvertedValue != null &&
                    this.ConvertedValue.Equals(input.ConvertedValue))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.CurrencyName != null)
                    hashCode = hashCode * 59 + this.CurrencyName.GetHashCode();
                if (this.CurrencySymbol != null)
                    hashCode = hashCode * 59 + this.CurrencySymbol.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Owned != null)
                    hashCode = hashCode * 59 + this.Owned.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.ImageName != null)
                    hashCode = hashCode * 59 + this.ImageName.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.ConvertedCurrency != null)
                    hashCode = hashCode * 59 + this.ConvertedCurrency.GetHashCode();
                if (this.ConvertedValue != null)
                    hashCode = hashCode * 59 + this.ConvertedValue.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
