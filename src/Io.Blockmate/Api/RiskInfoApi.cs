/*
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Io.Blockmate.Client;
using Io.Blockmate.Model;

namespace Io.Blockmate.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRiskInfoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get address risk score
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>GetAddressRiskScore200Response</returns>
        GetAddressRiskScore200Response GetAddressRiskScore (string address = default(string), string chain = default(string));

        /// <summary>
        /// Get address risk score
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>ApiResponse of GetAddressRiskScore200Response</returns>
        ApiResponse<GetAddressRiskScore200Response> GetAddressRiskScoreWithHttpInfo (string address = default(string), string chain = default(string));
        /// <summary>
        /// Get address risk score case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <returns>AddressRiskReport</returns>
        AddressRiskReport GetAddressRiskScoreCase (string caseId);

        /// <summary>
        /// Get address risk score case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <returns>ApiResponse of AddressRiskReport</returns>
        ApiResponse<AddressRiskReport> GetAddressRiskScoreCaseWithHttpInfo (string caseId);
        /// <summary>
        /// Get address risk score details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>AddressRiskReport</returns>
        AddressRiskReport GetAddressRiskScoreDetails (string address = default(string), string chain = default(string));

        /// <summary>
        /// Get address risk score details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>ApiResponse of AddressRiskReport</returns>
        ApiResponse<AddressRiskReport> GetAddressRiskScoreDetailsWithHttpInfo (string address = default(string), string chain = default(string));
        /// <summary>
        /// Get multiple risk scores for addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="requestBody">Addresses for which risk should be returned (maximum of 5000 in one request) (optional)</param>
        /// <returns>Dictionary<string, int></returns>
        Dictionary<string, int> GetMultipleAddressRiskScore (string chain = default(string), List<string> requestBody = default(List<string>));

        /// <summary>
        /// Get multiple risk scores for addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="requestBody">Addresses for which risk should be returned (maximum of 5000 in one request) (optional)</param>
        /// <returns>ApiResponse of Dictionary<string, int></returns>
        ApiResponse<Dictionary<string, int>> GetMultipleAddressRiskScoreWithHttpInfo (string chain = default(string), List<string> requestBody = default(List<string>));
        /// <summary>
        /// Get transaction risk score
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>GetTransactionRiskScore200Response</returns>
        GetTransactionRiskScore200Response GetTransactionRiskScore (string transaction = default(string), string chain = default(string));

        /// <summary>
        /// Get transaction risk score
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>ApiResponse of GetTransactionRiskScore200Response</returns>
        ApiResponse<GetTransactionRiskScore200Response> GetTransactionRiskScoreWithHttpInfo (string transaction = default(string), string chain = default(string));
        /// <summary>
        /// Get transaction risk score case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <returns>TransactionRiskReport</returns>
        TransactionRiskReport GetTransactionRiskScoreCase (string caseId);

        /// <summary>
        /// Get transaction risk score case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <returns>ApiResponse of TransactionRiskReport</returns>
        ApiResponse<TransactionRiskReport> GetTransactionRiskScoreCaseWithHttpInfo (string caseId);
        /// <summary>
        /// Get transaction risk score details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>TransactionRiskReport</returns>
        TransactionRiskReport GetTransactionRiskScoreDetails (string transaction = default(string), string chain = default(string));

        /// <summary>
        /// Get transaction risk score details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>ApiResponse of TransactionRiskReport</returns>
        ApiResponse<TransactionRiskReport> GetTransactionRiskScoreDetailsWithHttpInfo (string transaction = default(string), string chain = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get address risk score
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetAddressRiskScore200Response</returns>
        System.Threading.Tasks.Task<GetAddressRiskScore200Response> GetAddressRiskScoreAsync (string address = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get address risk score
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetAddressRiskScore200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAddressRiskScore200Response>> GetAddressRiskScoreWithHttpInfoAsync (string address = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get address risk score case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddressRiskReport</returns>
        System.Threading.Tasks.Task<AddressRiskReport> GetAddressRiskScoreCaseAsync (string caseId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get address risk score case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddressRiskReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressRiskReport>> GetAddressRiskScoreCaseWithHttpInfoAsync (string caseId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get address risk score details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddressRiskReport</returns>
        System.Threading.Tasks.Task<AddressRiskReport> GetAddressRiskScoreDetailsAsync (string address = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get address risk score details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddressRiskReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressRiskReport>> GetAddressRiskScoreDetailsWithHttpInfoAsync (string address = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get multiple risk scores for addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="requestBody">Addresses for which risk should be returned (maximum of 5000 in one request) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary<string, int></returns>
        System.Threading.Tasks.Task<Dictionary<string, int>> GetMultipleAddressRiskScoreAsync (string chain = default(string), List<string> requestBody = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get multiple risk scores for addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="requestBody">Addresses for which risk should be returned (maximum of 5000 in one request) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, int>>> GetMultipleAddressRiskScoreWithHttpInfoAsync (string chain = default(string), List<string> requestBody = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get transaction risk score
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTransactionRiskScore200Response</returns>
        System.Threading.Tasks.Task<GetTransactionRiskScore200Response> GetTransactionRiskScoreAsync (string transaction = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get transaction risk score
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTransactionRiskScore200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTransactionRiskScore200Response>> GetTransactionRiskScoreWithHttpInfoAsync (string transaction = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get transaction risk score case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionRiskReport</returns>
        System.Threading.Tasks.Task<TransactionRiskReport> GetTransactionRiskScoreCaseAsync (string caseId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get transaction risk score case
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionRiskReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionRiskReport>> GetTransactionRiskScoreCaseWithHttpInfoAsync (string caseId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get transaction risk score details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionRiskReport</returns>
        System.Threading.Tasks.Task<TransactionRiskReport> GetTransactionRiskScoreDetailsAsync (string transaction = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get transaction risk score details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionRiskReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionRiskReport>> GetTransactionRiskScoreDetailsWithHttpInfoAsync (string transaction = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RiskInfoApi : IRiskInfoApi
    {
        private Io.Blockmate.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RiskInfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RiskInfoApi(String basePath)
        {
            this.Configuration = new Io.Blockmate.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Io.Blockmate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RiskInfoApi"/> class
        /// </summary>
        /// <returns></returns>
        public RiskInfoApi()
        {
            this.Configuration = Io.Blockmate.Client.Configuration.Default;

            ExceptionFactory = Io.Blockmate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RiskInfoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RiskInfoApi(Io.Blockmate.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Io.Blockmate.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Io.Blockmate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Blockmate.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Blockmate.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get address risk score 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>GetAddressRiskScore200Response</returns>
        public GetAddressRiskScore200Response GetAddressRiskScore (string address = default(string), string chain = default(string))
        {
             ApiResponse<GetAddressRiskScore200Response> localVarResponse = GetAddressRiskScoreWithHttpInfo(address, chain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get address risk score 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>ApiResponse of GetAddressRiskScore200Response</returns>
        public ApiResponse<GetAddressRiskScore200Response> GetAddressRiskScoreWithHttpInfo (string address = default(string), string chain = default(string))
        {

            var localVarPath = "/v1/risk/score";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (chain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "chain", chain)); // query parameter

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressRiskScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAddressRiskScore200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAddressRiskScore200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAddressRiskScore200Response)));
        }

        /// <summary>
        /// Get address risk score 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetAddressRiskScore200Response</returns>
        public async System.Threading.Tasks.Task<GetAddressRiskScore200Response> GetAddressRiskScoreAsync (string address = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetAddressRiskScore200Response> localVarResponse = await GetAddressRiskScoreWithHttpInfoAsync(address, chain, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get address risk score 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetAddressRiskScore200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAddressRiskScore200Response>> GetAddressRiskScoreWithHttpInfoAsync (string address = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/risk/score";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (chain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "chain", chain)); // query parameter

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressRiskScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAddressRiskScore200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAddressRiskScore200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAddressRiskScore200Response)));
        }

        /// <summary>
        /// Get address risk score case 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <returns>AddressRiskReport</returns>
        public AddressRiskReport GetAddressRiskScoreCase (string caseId)
        {
             ApiResponse<AddressRiskReport> localVarResponse = GetAddressRiskScoreCaseWithHttpInfo(caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get address risk score case 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <returns>ApiResponse of AddressRiskReport</returns>
        public ApiResponse<AddressRiskReport> GetAddressRiskScoreCaseWithHttpInfo (string caseId)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling RiskInfoApi->GetAddressRiskScoreCase");

            var localVarPath = "/v1/risk/score/details/{case_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("case_id", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressRiskScoreCase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressRiskReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressRiskReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressRiskReport)));
        }

        /// <summary>
        /// Get address risk score case 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddressRiskReport</returns>
        public async System.Threading.Tasks.Task<AddressRiskReport> GetAddressRiskScoreCaseAsync (string caseId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddressRiskReport> localVarResponse = await GetAddressRiskScoreCaseWithHttpInfoAsync(caseId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get address risk score case 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddressRiskReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressRiskReport>> GetAddressRiskScoreCaseWithHttpInfoAsync (string caseId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling RiskInfoApi->GetAddressRiskScoreCase");

            var localVarPath = "/v1/risk/score/details/{case_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("case_id", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressRiskScoreCase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressRiskReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressRiskReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressRiskReport)));
        }

        /// <summary>
        /// Get address risk score details 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>AddressRiskReport</returns>
        public AddressRiskReport GetAddressRiskScoreDetails (string address = default(string), string chain = default(string))
        {
             ApiResponse<AddressRiskReport> localVarResponse = GetAddressRiskScoreDetailsWithHttpInfo(address, chain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get address risk score details 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>ApiResponse of AddressRiskReport</returns>
        public ApiResponse<AddressRiskReport> GetAddressRiskScoreDetailsWithHttpInfo (string address = default(string), string chain = default(string))
        {

            var localVarPath = "/v1/risk/score/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (chain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "chain", chain)); // query parameter

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressRiskScoreDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressRiskReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressRiskReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressRiskReport)));
        }

        /// <summary>
        /// Get address risk score details 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddressRiskReport</returns>
        public async System.Threading.Tasks.Task<AddressRiskReport> GetAddressRiskScoreDetailsAsync (string address = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddressRiskReport> localVarResponse = await GetAddressRiskScoreDetailsWithHttpInfoAsync(address, chain, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get address risk score details 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddressRiskReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressRiskReport>> GetAddressRiskScoreDetailsWithHttpInfoAsync (string address = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/risk/score/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (chain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "chain", chain)); // query parameter

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressRiskScoreDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressRiskReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddressRiskReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressRiskReport)));
        }

        /// <summary>
        /// Get multiple risk scores for addresses 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="requestBody">Addresses for which risk should be returned (maximum of 5000 in one request) (optional)</param>
        /// <returns>Dictionary<string, int></returns>
        public Dictionary<string, int> GetMultipleAddressRiskScore (string chain = default(string), List<string> requestBody = default(List<string>))
        {
             ApiResponse<Dictionary<string, int>> localVarResponse = GetMultipleAddressRiskScoreWithHttpInfo(chain, requestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple risk scores for addresses 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="requestBody">Addresses for which risk should be returned (maximum of 5000 in one request) (optional)</param>
        /// <returns>ApiResponse of Dictionary<string, int></returns>
        public ApiResponse<Dictionary<string, int>> GetMultipleAddressRiskScoreWithHttpInfo (string chain = default(string), List<string> requestBody = default(List<string>))
        {

            var localVarPath = "/v1/risk/score";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "chain", chain)); // query parameter
            if (requestBody != null && requestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestBody; // byte array
            }

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultipleAddressRiskScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, int>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, int>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, int>)));
        }

        /// <summary>
        /// Get multiple risk scores for addresses 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="requestBody">Addresses for which risk should be returned (maximum of 5000 in one request) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary<string, int></returns>
        public async System.Threading.Tasks.Task<Dictionary<string, int>> GetMultipleAddressRiskScoreAsync (string chain = default(string), List<string> requestBody = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, int>> localVarResponse = await GetMultipleAddressRiskScoreWithHttpInfoAsync(chain, requestBody, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get multiple risk scores for addresses 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="requestBody">Addresses for which risk should be returned (maximum of 5000 in one request) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, int&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, int>>> GetMultipleAddressRiskScoreWithHttpInfoAsync (string chain = default(string), List<string> requestBody = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/risk/score";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "chain", chain)); // query parameter
            if (requestBody != null && requestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestBody; // byte array
            }

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultipleAddressRiskScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, int>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, int>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, int>)));
        }

        /// <summary>
        /// Get transaction risk score 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>GetTransactionRiskScore200Response</returns>
        public GetTransactionRiskScore200Response GetTransactionRiskScore (string transaction = default(string), string chain = default(string))
        {
             ApiResponse<GetTransactionRiskScore200Response> localVarResponse = GetTransactionRiskScoreWithHttpInfo(transaction, chain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transaction risk score 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>ApiResponse of GetTransactionRiskScore200Response</returns>
        public ApiResponse<GetTransactionRiskScore200Response> GetTransactionRiskScoreWithHttpInfo (string transaction = default(string), string chain = default(string))
        {

            var localVarPath = "/v1/risk/transaction/score";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transaction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transaction", transaction)); // query parameter
            if (chain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "chain", chain)); // query parameter

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionRiskScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTransactionRiskScore200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTransactionRiskScore200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTransactionRiskScore200Response)));
        }

        /// <summary>
        /// Get transaction risk score 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTransactionRiskScore200Response</returns>
        public async System.Threading.Tasks.Task<GetTransactionRiskScore200Response> GetTransactionRiskScoreAsync (string transaction = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetTransactionRiskScore200Response> localVarResponse = await GetTransactionRiskScoreWithHttpInfoAsync(transaction, chain, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transaction risk score 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTransactionRiskScore200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTransactionRiskScore200Response>> GetTransactionRiskScoreWithHttpInfoAsync (string transaction = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/risk/transaction/score";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transaction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transaction", transaction)); // query parameter
            if (chain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "chain", chain)); // query parameter

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionRiskScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTransactionRiskScore200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTransactionRiskScore200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTransactionRiskScore200Response)));
        }

        /// <summary>
        /// Get transaction risk score case 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <returns>TransactionRiskReport</returns>
        public TransactionRiskReport GetTransactionRiskScoreCase (string caseId)
        {
             ApiResponse<TransactionRiskReport> localVarResponse = GetTransactionRiskScoreCaseWithHttpInfo(caseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transaction risk score case 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <returns>ApiResponse of TransactionRiskReport</returns>
        public ApiResponse<TransactionRiskReport> GetTransactionRiskScoreCaseWithHttpInfo (string caseId)
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling RiskInfoApi->GetTransactionRiskScoreCase");

            var localVarPath = "/v1/risk/transaction/score/details/{case_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("case_id", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionRiskScoreCase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionRiskReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionRiskReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionRiskReport)));
        }

        /// <summary>
        /// Get transaction risk score case 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionRiskReport</returns>
        public async System.Threading.Tasks.Task<TransactionRiskReport> GetTransactionRiskScoreCaseAsync (string caseId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionRiskReport> localVarResponse = await GetTransactionRiskScoreCaseWithHttpInfoAsync(caseId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transaction risk score case 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caseId">Case identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionRiskReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionRiskReport>> GetTransactionRiskScoreCaseWithHttpInfoAsync (string caseId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'caseId' is set
            if (caseId == null)
                throw new ApiException(400, "Missing required parameter 'caseId' when calling RiskInfoApi->GetTransactionRiskScoreCase");

            var localVarPath = "/v1/risk/transaction/score/details/{case_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (caseId != null) localVarPathParams.Add("case_id", this.Configuration.ApiClient.ParameterToString(caseId)); // path parameter

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionRiskScoreCase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionRiskReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionRiskReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionRiskReport)));
        }

        /// <summary>
        /// Get transaction risk score details 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>TransactionRiskReport</returns>
        public TransactionRiskReport GetTransactionRiskScoreDetails (string transaction = default(string), string chain = default(string))
        {
             ApiResponse<TransactionRiskReport> localVarResponse = GetTransactionRiskScoreDetailsWithHttpInfo(transaction, chain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transaction risk score details 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <returns>ApiResponse of TransactionRiskReport</returns>
        public ApiResponse<TransactionRiskReport> GetTransactionRiskScoreDetailsWithHttpInfo (string transaction = default(string), string chain = default(string))
        {

            var localVarPath = "/v1/risk/transaction/score/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transaction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transaction", transaction)); // query parameter
            if (chain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "chain", chain)); // query parameter

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionRiskScoreDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionRiskReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionRiskReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionRiskReport)));
        }

        /// <summary>
        /// Get transaction risk score details 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionRiskReport</returns>
        public async System.Threading.Tasks.Task<TransactionRiskReport> GetTransactionRiskScoreDetailsAsync (string transaction = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionRiskReport> localVarResponse = await GetTransactionRiskScoreDetailsWithHttpInfoAsync(transaction, chain, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transaction risk score details 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transaction">Transaction hash for which risk should be returned (optional)</param>
        /// <param name="chain">Blockchain identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionRiskReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionRiskReport>> GetTransactionRiskScoreDetailsWithHttpInfoAsync (string transaction = default(string), string chain = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/risk/transaction/score/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transaction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transaction", transaction)); // query parameter
            if (chain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "chain", chain)); // query parameter

            // authentication (ProjectJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionRiskScoreDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionRiskReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionRiskReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionRiskReport)));
        }

    }
}
