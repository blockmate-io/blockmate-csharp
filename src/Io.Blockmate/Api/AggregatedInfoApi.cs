/*
 * Blockmate
 *
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Io.Blockmate.Client;
using Io.Blockmate.Model;

namespace Io.Blockmate.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAggregatedInfoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get list of account providers hints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountProviderHint</returns>
        AccountProviderHint AccountProviderHintsList ();

        /// <summary>
        /// Get list of account providers hints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountProviderHint</returns>
        ApiResponse<AccountProviderHint> AccountProviderHintsListWithHttpInfo ();
        /// <summary>
        /// Get list of account providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountProvider</returns>
        AccountProvider AccountProvidersList ();

        /// <summary>
        /// Get list of account providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountProvider</returns>
        ApiResponse<AccountProvider> AccountProvidersListWithHttpInfo ();
        /// <summary>
        /// List accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<Account></returns>
        List<Account> Accounts ();

        /// <summary>
        /// List accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<Account></returns>
        ApiResponse<List<Account>> AccountsWithHttpInfo ();
        /// <summary>
        /// Get balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <returns>Balance200Response</returns>
        Balance200Response Balance (string currency = default(string));

        /// <summary>
        /// Get balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <returns>ApiResponse of Balance200Response</returns>
        ApiResponse<Balance200Response> BalanceWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Get transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Set time from which the transactions will be get.  (optional)</param>
        /// <param name="until">Set time to which the transactions will be get. The default value is the actual date.  (optional)</param>
        /// <param name="limit">Limit the number of the transactions in the response. Default page size is 50.  (optional)</param>
        /// <param name="cursor">Specify on requesting the next page. Use the &#x60;page_cursor&#x60; from the previous response.  (optional)</param>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <param name="accountFilter">Filter results to only provided account. When omitted, it returns all transactions from all accounts.  (optional)</param>
        /// <returns>Transactions200Response</returns>
        Transactions200Response Transactions (DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), decimal? limit = default(decimal?), string cursor = default(string), string currency = default(string), string accountFilter = default(string));

        /// <summary>
        /// Get transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Set time from which the transactions will be get.  (optional)</param>
        /// <param name="until">Set time to which the transactions will be get. The default value is the actual date.  (optional)</param>
        /// <param name="limit">Limit the number of the transactions in the response. Default page size is 50.  (optional)</param>
        /// <param name="cursor">Specify on requesting the next page. Use the &#x60;page_cursor&#x60; from the previous response.  (optional)</param>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <param name="accountFilter">Filter results to only provided account. When omitted, it returns all transactions from all accounts.  (optional)</param>
        /// <returns>ApiResponse of Transactions200Response</returns>
        ApiResponse<Transactions200Response> TransactionsWithHttpInfo (DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), decimal? limit = default(decimal?), string cursor = default(string), string currency = default(string), string accountFilter = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get list of account providers hints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountProviderHint</returns>
        System.Threading.Tasks.Task<AccountProviderHint> AccountProviderHintsListAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get list of account providers hints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountProviderHint)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountProviderHint>> AccountProviderHintsListWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get list of account providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountProvider</returns>
        System.Threading.Tasks.Task<AccountProvider> AccountProvidersListAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get list of account providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountProvider>> AccountProvidersListWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Account></returns>
        System.Threading.Tasks.Task<List<Account>> AccountsAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Account&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Account>>> AccountsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Balance200Response</returns>
        System.Threading.Tasks.Task<Balance200Response> BalanceAsync (string currency = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Balance200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Balance200Response>> BalanceWithHttpInfoAsync (string currency = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Set time from which the transactions will be get.  (optional)</param>
        /// <param name="until">Set time to which the transactions will be get. The default value is the actual date.  (optional)</param>
        /// <param name="limit">Limit the number of the transactions in the response. Default page size is 50.  (optional)</param>
        /// <param name="cursor">Specify on requesting the next page. Use the &#x60;page_cursor&#x60; from the previous response.  (optional)</param>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <param name="accountFilter">Filter results to only provided account. When omitted, it returns all transactions from all accounts.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Transactions200Response</returns>
        System.Threading.Tasks.Task<Transactions200Response> TransactionsAsync (DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), decimal? limit = default(decimal?), string cursor = default(string), string currency = default(string), string accountFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Set time from which the transactions will be get.  (optional)</param>
        /// <param name="until">Set time to which the transactions will be get. The default value is the actual date.  (optional)</param>
        /// <param name="limit">Limit the number of the transactions in the response. Default page size is 50.  (optional)</param>
        /// <param name="cursor">Specify on requesting the next page. Use the &#x60;page_cursor&#x60; from the previous response.  (optional)</param>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <param name="accountFilter">Filter results to only provided account. When omitted, it returns all transactions from all accounts.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Transactions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transactions200Response>> TransactionsWithHttpInfoAsync (DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), decimal? limit = default(decimal?), string cursor = default(string), string currency = default(string), string accountFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AggregatedInfoApi : IAggregatedInfoApi
    {
        private Io.Blockmate.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedInfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AggregatedInfoApi(String basePath)
        {
            this.Configuration = new Io.Blockmate.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Io.Blockmate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedInfoApi"/> class
        /// </summary>
        /// <returns></returns>
        public AggregatedInfoApi()
        {
            this.Configuration = Io.Blockmate.Client.Configuration.Default;

            ExceptionFactory = Io.Blockmate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedInfoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AggregatedInfoApi(Io.Blockmate.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Io.Blockmate.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Io.Blockmate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Blockmate.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Blockmate.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get list of account providers hints 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountProviderHint</returns>
        public AccountProviderHint AccountProviderHintsList ()
        {
             ApiResponse<AccountProviderHint> localVarResponse = AccountProviderHintsListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of account providers hints 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountProviderHint</returns>
        public ApiResponse<AccountProviderHint> AccountProviderHintsListWithHttpInfo ()
        {

            var localVarPath = "/v1/aggregate/account_provider_hints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountProviderHintsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountProviderHint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountProviderHint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountProviderHint)));
        }

        /// <summary>
        /// Get list of account providers hints 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountProviderHint</returns>
        public async System.Threading.Tasks.Task<AccountProviderHint> AccountProviderHintsListAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AccountProviderHint> localVarResponse = await AccountProviderHintsListWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of account providers hints 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountProviderHint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountProviderHint>> AccountProviderHintsListWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/aggregate/account_provider_hints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountProviderHintsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountProviderHint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountProviderHint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountProviderHint)));
        }

        /// <summary>
        /// Get list of account providers 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountProvider</returns>
        public AccountProvider AccountProvidersList ()
        {
             ApiResponse<AccountProvider> localVarResponse = AccountProvidersListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of account providers 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountProvider</returns>
        public ApiResponse<AccountProvider> AccountProvidersListWithHttpInfo ()
        {

            var localVarPath = "/v1/aggregate/account_providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountProvidersList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountProvider>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountProvider) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountProvider)));
        }

        /// <summary>
        /// Get list of account providers 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountProvider</returns>
        public async System.Threading.Tasks.Task<AccountProvider> AccountProvidersListAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AccountProvider> localVarResponse = await AccountProvidersListWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of account providers 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountProvider)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountProvider>> AccountProvidersListWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/aggregate/account_providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountProvidersList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountProvider>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountProvider) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountProvider)));
        }

        /// <summary>
        /// List accounts 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<Account></returns>
        public List<Account> Accounts ()
        {
             ApiResponse<List<Account>> localVarResponse = AccountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List accounts 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<Account></returns>
        public ApiResponse<List<Account>> AccountsWithHttpInfo ()
        {

            var localVarPath = "/v1/aggregate/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Accounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Account>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Account>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Account>)));
        }

        /// <summary>
        /// List accounts 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Account></returns>
        public async System.Threading.Tasks.Task<List<Account>> AccountsAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Account>> localVarResponse = await AccountsWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List accounts 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Account&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Account>>> AccountsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/aggregate/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Accounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Account>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Account>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Account>)));
        }

        /// <summary>
        /// Get balance 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <returns>Balance200Response</returns>
        public Balance200Response Balance (string currency = default(string))
        {
             ApiResponse<Balance200Response> localVarResponse = BalanceWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get balance 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <returns>ApiResponse of Balance200Response</returns>
        public ApiResponse<Balance200Response> BalanceWithHttpInfo (string currency = default(string))
        {

            var localVarPath = "/v1/aggregate/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Balance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Balance200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Balance200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance200Response)));
        }

        /// <summary>
        /// Get balance 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Balance200Response</returns>
        public async System.Threading.Tasks.Task<Balance200Response> BalanceAsync (string currency = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Balance200Response> localVarResponse = await BalanceWithHttpInfoAsync(currency, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get balance 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Balance200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Balance200Response>> BalanceWithHttpInfoAsync (string currency = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/aggregate/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Balance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Balance200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Balance200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance200Response)));
        }

        /// <summary>
        /// Get transactions 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Set time from which the transactions will be get.  (optional)</param>
        /// <param name="until">Set time to which the transactions will be get. The default value is the actual date.  (optional)</param>
        /// <param name="limit">Limit the number of the transactions in the response. Default page size is 50.  (optional)</param>
        /// <param name="cursor">Specify on requesting the next page. Use the &#x60;page_cursor&#x60; from the previous response.  (optional)</param>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <param name="accountFilter">Filter results to only provided account. When omitted, it returns all transactions from all accounts.  (optional)</param>
        /// <returns>Transactions200Response</returns>
        public Transactions200Response Transactions (DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), decimal? limit = default(decimal?), string cursor = default(string), string currency = default(string), string accountFilter = default(string))
        {
             ApiResponse<Transactions200Response> localVarResponse = TransactionsWithHttpInfo(since, until, limit, cursor, currency, accountFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transactions 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Set time from which the transactions will be get.  (optional)</param>
        /// <param name="until">Set time to which the transactions will be get. The default value is the actual date.  (optional)</param>
        /// <param name="limit">Limit the number of the transactions in the response. Default page size is 50.  (optional)</param>
        /// <param name="cursor">Specify on requesting the next page. Use the &#x60;page_cursor&#x60; from the previous response.  (optional)</param>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <param name="accountFilter">Filter results to only provided account. When omitted, it returns all transactions from all accounts.  (optional)</param>
        /// <returns>ApiResponse of Transactions200Response</returns>
        public ApiResponse<Transactions200Response> TransactionsWithHttpInfo (DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), decimal? limit = default(decimal?), string cursor = default(string), string currency = default(string), string accountFilter = default(string))
        {

            var localVarPath = "/v1/aggregate/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter
            if (accountFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account-filter", accountFilter)); // query parameter

            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transactions200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Transactions200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transactions200Response)));
        }

        /// <summary>
        /// Get transactions 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Set time from which the transactions will be get.  (optional)</param>
        /// <param name="until">Set time to which the transactions will be get. The default value is the actual date.  (optional)</param>
        /// <param name="limit">Limit the number of the transactions in the response. Default page size is 50.  (optional)</param>
        /// <param name="cursor">Specify on requesting the next page. Use the &#x60;page_cursor&#x60; from the previous response.  (optional)</param>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <param name="accountFilter">Filter results to only provided account. When omitted, it returns all transactions from all accounts.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Transactions200Response</returns>
        public async System.Threading.Tasks.Task<Transactions200Response> TransactionsAsync (DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), decimal? limit = default(decimal?), string cursor = default(string), string currency = default(string), string accountFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Transactions200Response> localVarResponse = await TransactionsWithHttpInfoAsync(since, until, limit, cursor, currency, accountFilter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transactions 
        /// </summary>
        /// <exception cref="Io.Blockmate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Set time from which the transactions will be get.  (optional)</param>
        /// <param name="until">Set time to which the transactions will be get. The default value is the actual date.  (optional)</param>
        /// <param name="limit">Limit the number of the transactions in the response. Default page size is 50.  (optional)</param>
        /// <param name="cursor">Specify on requesting the next page. Use the &#x60;page_cursor&#x60; from the previous response.  (optional)</param>
        /// <param name="currency">Currency to convert to.  (optional)</param>
        /// <param name="accountFilter">Filter results to only provided account. When omitted, it returns all transactions from all accounts.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Transactions200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transactions200Response>> TransactionsWithHttpInfoAsync (DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), decimal? limit = default(decimal?), string cursor = default(string), string currency = default(string), string accountFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/aggregate/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter
            if (accountFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account-filter", accountFilter)); // query parameter

            // authentication (UserJWT) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transactions200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Transactions200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transactions200Response)));
        }

    }
}
